{"ast":null,"code":"import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */class StarRatings extends StreamlitComponentBase{constructor(){super(...arguments);this.state={rating:0,hoverRating:0,isFocused:false};this.render=()=>{// Arguments that are passed to the plugin in Python are accessible\nconst{rating,hoverRating,isFocused}=this.state;const{args,disabled,theme}=this.props;const numStars=args[\"numStars\"]||5;// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\n// const { theme } = this.props\nconst primaryColor=(theme===null||theme===void 0?void 0:theme.primaryColor)||\"gray\";const style={border:\"1px solid \".concat(isFocused?primaryColor:\"gray\"),outline:\"1px solid \".concat(isFocused?primaryColor:\"gray\")};// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nconst borderStyling=\"1px solid \".concat(this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{children:[...Array(numStars)].map((_,index)=>/*#__PURE__*/_jsx(\"span\",{onMouseEnter:()=>this.handleMouseEnter(index+1),onMouseLeave:this.handleMouseLeave,onClick:()=>this.handleRatingChange(index+1),style:{cursor:\"pointer\",color:index<(hoverRating||rating)?\"gold\":\"grey\"},children:this.renderStar(index+1)},index))})});};/** Click handler for our \"Click Me!\" button. */this.renderStar=index=>{const{hoverRating,rating}=this.state;const roundedRating=hoverRating!==null?hoverRating:rating;// Check if the current index is less than the rounded rating\n// If yes, render a full star\nif(index<=roundedRating){return\"★\";}else{// Check if the rounded rating is a whole number\n// If not, check if the current index is equal to the rounded rating plus 0.5\n// If yes, render a half star\nif(this.state.rating-index===0.5){return\"☆\";// Half-star symbol\n}else if(index<=roundedRating){return\"★\";// Full-star symbol\n}else{return\"☆\";// Empty-star symbol\n}};//   if (roundedRating % 1 !== 0 && index === roundedRating + 0.5) {\n//     return \"½\";\n//   } else {\n//     return \"☆\"; // Otherwise, render an empty star\n//   }\n// }\n};this.handleMouseEnter=index=>{this.setState({hoverRating:index});};this.handleMouseLeave=()=>{this.setState({hoverRating:0});};this.handleRatingChange=rating=>{// Round the rating to the nearest half-star (0.5 increment)\nconst roundedRating=Math.round(rating*2)/2;this.setState({rating:roundedRating},()=>Streamlit.setComponentValue(roundedRating));};/** Focus handler for our \"Click Me!\" button. */this._onFocus=()=>{this.setState({isFocused:true});};/** Blur handler for our \"Click Me!\" button. */this._onBlur=()=>{this.setState({isFocused:false});};}}// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StarRatings);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","jsx","_jsx","StarRatings","constructor","arguments","state","rating","hoverRating","isFocused","render","args","disabled","theme","props","numStars","primaryColor","style","border","concat","outline","borderStyling","children","Array","map","_","index","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","onClick","handleRatingChange","cursor","color","renderStar","roundedRating","setState","Math","round","setComponentValue","_onFocus","_onBlur"],"sources":["C:/Users/monik/Downloads/component-template-master/component-template-master/template/star_ratings/frontend/src/StarRatings.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  ComponentProps, Theme\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  rating: number;\n  hoverRating: number | null;\n  isFocused: boolean;\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass StarRatings extends StreamlitComponentBase<State> {\n  public state: State = { rating: 0, hoverRating: 0, isFocused: false };\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    const { rating, hoverRating, isFocused } = this.state;\n    const { args, disabled, theme }: ComponentProps & { theme?: Theme } = this.props;\n\n    const numStars: number = args[\"numStars\"] || 5;\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    // const { theme } = this.props\n    const primaryColor = theme?.primaryColor || \"gray\";\n    const style: React.CSSProperties = {\n      border: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n      outline: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n    };\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <div>\n        <div>\n          {[...Array(numStars)].map((_, index) => (\n            <span\n              key={index}\n              onMouseEnter={() => this.handleMouseEnter(index +1)}\n              onMouseLeave={this.handleMouseLeave}\n              onClick={() => this.handleRatingChange(index + 1)}\n              style={{\n                cursor: \"pointer\",\n                color: index < (hoverRating || rating) ? \"gold\" : \"grey\"\n              }}\n            >\n              {this.renderStar(index +1)}\n            </span>\n          ))}\n          \n        </div>\n      </div>\n      \n    );\n  };\n  /** Click handler for our \"Click Me!\" button. */\n  private renderStar = (index: number): ReactNode => {\n    const { hoverRating, rating } = this.state;\n    const roundedRating = hoverRating !== null ? hoverRating : rating;\n    \n    // Check if the current index is less than the rounded rating\n    // If yes, render a full star\n    if (index <= roundedRating) {\n      return \"★\";\n    } else {\n      // Check if the rounded rating is a whole number\n      // If not, check if the current index is equal to the rounded rating plus 0.5\n      // If yes, render a half star\n\n      if (this.state.rating - index === 0.5) {\n        return \"☆\"; // Half-star symbol\n      } else if (index <= roundedRating) {\n        return \"★\"; // Full-star symbol\n      } else {\n        return \"☆\"; // Empty-star symbol\n      }\n    };\n  \n    //   if (roundedRating % 1 !== 0 && index === roundedRating + 0.5) {\n    //     return \"½\";\n    //   } else {\n    //     return \"☆\"; // Otherwise, render an empty star\n    //   }\n    // }\n  };\n\n  private handleMouseEnter = (index: number): void => {\n    this.setState({ hoverRating: index });\n  };\n\n  private handleMouseLeave = (): void => {\n    this.setState({ hoverRating: 0 });\n  };\n\n  private handleRatingChange = (rating: number): void => {\n    // Round the rating to the nearest half-star (0.5 increment)\n    const roundedRating = Math.round(rating * 2) / 2;\n    this.setState({ rating: roundedRating }, () => Streamlit.setComponentValue(roundedRating));\n  };\n\n\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StarRatings)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}