{"ast":null,"code":"// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n//   ComponentProps, Theme\n// } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n\n// interface State {\n//   rating: number;\n//   hoverRating: number | null;\n//   isFocused: boolean;\n// }\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class StarRatings extends StreamlitComponentBase<State> {\n//   public state: State = { rating: 0, hoverRating: null, isFocused: false };\n\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const { rating, hoverRating, isFocused } = this.state;\n//     const { args, disabled, theme }: ComponentProps & { theme?: Theme } = this.props;\n\n//     const numStars: number = args[\"numStars\"] || 5;\n//     const name: string = args[\"name\"] || \"\";\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     // const { theme } = this.props\n//     const primaryColor = theme?.primaryColor || \"gray\";\n//     const style: React.CSSProperties = {\n//       border: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n//       outline: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n//     };\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <div>\n//         <span>Hello {name},</span>\n//         <div>\n//           {[...Array(numStars)].map((_, index) => (\n//             <span\n//               key={index}\n//               onMouseEnter={() => this.handleMouseEnter(index +0.5)}\n//               onMouseLeave={this.handleMouseLeave}\n//               onClick={() => this.handleRatingChange(index + 0.5)}\n//               style={{\n//                 cursor: \"pointer\",\n//                 color: index < (hoverRating || rating) ? \"gold\" : \"grey\"\n//               }}\n//             >\n//               {this.renderStar(index)}\n//             </span>\n//           ))}\n//         </div>\n//       </div>\n//     );\n//   };\n//   /** Click handler for our \"Click Me!\" button. */\n//   private renderStar = (index: number): ReactNode => {\n//     const { hoverRating, rating } = this.state;\n//     const roundedRating = hoverRating !== null ? hoverRating : rating;\n\n//     // Check if the current index is less than the rounded rating\n//     // If yes, render a full star\n//     if (index <= roundedRating) {\n//       return \"★\";\n//     } else {\n//       // Check if the rounded rating is a whole number\n//       // If not, check if the current index is equal to the rounded rating plus 0.5\n//       // If yes, render a half star\n\n//       if (this.state.rating - index === 0.5) {\n//         return \"☆\"; // Half-star symbol\n//       } else if (index <= roundedRating) {\n//         return \"★\"; // Full-star symbol\n//       } else {\n//         return \"☆\"; // Empty-star symbol\n//       }\n//     };\n\n//     //   if (roundedRating % 1 !== 0 && index === roundedRating + 0.5) {\n//     //     return \"½\";\n//     //   } else {\n//     //     return \"☆\"; // Otherwise, render an empty star\n//     //   }\n//     // }\n//   };\n\n//   private handleMouseEnter = (index: number): void => {\n//     this.setState({ hoverRating: index });\n//   };\n\n//   private handleMouseLeave = (): void => {\n//     this.setState({ hoverRating: 0 });\n//   };\n\n//   private handleRatingChange = (rating: number): void => {\n//     // Round the rating to the nearest half-star (0.5 increment)\n//     const roundedRating = Math.round(rating * 2) / 2;\n//     this.setState({ rating: roundedRating }, () => Streamlit.setComponentValue(roundedRating));\n//   };\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   private _onFocus = (): void => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(StarRatings)","map":{"version":3,"names":[],"sources":["C:/Users/monik/Downloads/component-template-master/component-template-master/template/star_ratings/frontend/src/StarRatings.tsx"],"sourcesContent":["// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n//   ComponentProps, Theme\n// } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n\n// interface State {\n//   rating: number;\n//   hoverRating: number | null;\n//   isFocused: boolean;\n// }\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class StarRatings extends StreamlitComponentBase<State> {\n//   public state: State = { rating: 0, hoverRating: null, isFocused: false };\n\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const { rating, hoverRating, isFocused } = this.state;\n//     const { args, disabled, theme }: ComponentProps & { theme?: Theme } = this.props;\n\n//     const numStars: number = args[\"numStars\"] || 5;\n//     const name: string = args[\"name\"] || \"\";\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     // const { theme } = this.props\n//     const primaryColor = theme?.primaryColor || \"gray\";\n//     const style: React.CSSProperties = {\n//       border: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n//       outline: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n//     };\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <div>\n//         <span>Hello {name},</span>\n//         <div>\n//           {[...Array(numStars)].map((_, index) => (\n//             <span\n//               key={index}\n//               onMouseEnter={() => this.handleMouseEnter(index +0.5)}\n//               onMouseLeave={this.handleMouseLeave}\n//               onClick={() => this.handleRatingChange(index + 0.5)}\n//               style={{\n//                 cursor: \"pointer\",\n//                 color: index < (hoverRating || rating) ? \"gold\" : \"grey\"\n//               }}\n//             >\n//               {this.renderStar(index)}\n//             </span>\n//           ))}\n//         </div>\n//       </div>\n//     );\n//   };\n//   /** Click handler for our \"Click Me!\" button. */\n//   private renderStar = (index: number): ReactNode => {\n//     const { hoverRating, rating } = this.state;\n//     const roundedRating = hoverRating !== null ? hoverRating : rating;\n    \n//     // Check if the current index is less than the rounded rating\n//     // If yes, render a full star\n//     if (index <= roundedRating) {\n//       return \"★\";\n//     } else {\n//       // Check if the rounded rating is a whole number\n//       // If not, check if the current index is equal to the rounded rating plus 0.5\n//       // If yes, render a half star\n\n//       if (this.state.rating - index === 0.5) {\n//         return \"☆\"; // Half-star symbol\n//       } else if (index <= roundedRating) {\n//         return \"★\"; // Full-star symbol\n//       } else {\n//         return \"☆\"; // Empty-star symbol\n//       }\n//     };\n  \n//     //   if (roundedRating % 1 !== 0 && index === roundedRating + 0.5) {\n//     //     return \"½\";\n//     //   } else {\n//     //     return \"☆\"; // Otherwise, render an empty star\n//     //   }\n//     // }\n//   };\n\n//   private handleMouseEnter = (index: number): void => {\n//     this.setState({ hoverRating: index });\n//   };\n\n//   private handleMouseLeave = (): void => {\n//     this.setState({ hoverRating: 0 });\n//   };\n\n//   private handleRatingChange = (rating: number): void => {\n//     // Round the rating to the nearest half-star (0.5 increment)\n//     const roundedRating = Math.round(rating * 2) / 2;\n//     this.setState({ rating: roundedRating }, () => Streamlit.setComponentValue(roundedRating));\n//   };\n\n\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   private _onFocus = (): void => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(StarRatings)\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}