{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\monik\\\\Downloads\\\\component-template-master\\\\component-template-master\\\\template\\\\star_ratings\\\\frontend\\\\src\\\\StarRatings.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass StarRatings extends StreamlitComponentBase {\n  constructor(..._args) {\n    super(..._args);\n    this.state = {\n      rating: 0,\n      isFocused: false\n    };\n    this.render = () => {\n      const {\n        rating,\n        isFocused\n      } = this.state;\n      const {\n        args,\n        disabled,\n        theme\n      } = this.props;\n      const numStars = args[\"numStars\"] || 5; // Number of stars passed from Python\n\n      // Use optional chaining to safely access properties of the theme object\n      const primaryColor = (theme === null || theme === void 0 ? void 0 : theme.primaryColor) || \"gray\";\n      const style = {\n        border: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n        outline: `1px solid ${isFocused ? primaryColor : \"gray\"}`\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [...Array(numStars)].map((_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => this.handleRatingChange(index + 1),\n            onMouseMove: event => this.handleMouseMove(event, index + 1),\n            onMouseLeave: () => this.handleMouseLeave(),\n            style: {\n              cursor: \"pointer\",\n              color: index < rating ? \"gold\" : \"gray\"\n            },\n            onFocus: this._onFocus,\n            onBlur: this._onBlur,\n            children: this.getStarSymbol(index + 1)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this);\n    };\n    this.handleRatingChange = rating => {\n      this.setState({\n        rating\n      }, () => Streamlit.setComponentValue(rating));\n    };\n    this.handleMouseMove = (event, index) => {\n      const rect = event.currentTarget.getBoundingClientRect();\n      const offsetX = event.clientX - rect.left;\n      const percentage = offsetX / rect.width;\n      let newRating = index + percentage;\n\n      // Round to the nearest half-star\n      newRating = Math.round(newRating * 2) / 2;\n      this.setState({\n        rating: newRating\n      });\n    };\n    this.handleMouseLeave = () => {\n      // Reset rating to the whole number\n      this.setState(prevState => ({\n        rating: Math.round(prevState.rating)\n      }));\n    };\n    this.getStarSymbol = index => {\n      const roundedRating = Math.round(this.state.rating);\n      if (this.state.rating - index === 0.5) {\n        return \"☆\"; // Half-star symbol\n      } else if (index <= roundedRating) {\n        return \"★\"; // Full-star symbol\n      } else {\n        return \"☆\"; // Empty-star symbol\n      }\n    };\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n}\nexport default _c = withStreamlitConnection(StarRatings);\n\n// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n//   ComponentProps, Theme\n// } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n\n// interface State {\n//   rating: number;\n//   hoverRating: number | null;\n//   isFocused: boolean;\n// }\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class StarRatings extends StreamlitComponentBase<State> {\n//   public state: State = { rating: 0, hoverRating: null, isFocused: false };\n\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const { rating, hoverRating, isFocused } = this.state;\n//     const { args, disabled, theme }: ComponentProps & { theme?: Theme } = this.props;\n\n//     const numStars: number = args[\"numStars\"] || 5;\n//     const name: string = args[\"name\"] || \"\";\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     // const { theme } = this.props\n//     const primaryColor = theme?.primaryColor || \"gray\";\n//     const style: React.CSSProperties = {\n//       border: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n//       outline: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n//     };\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <div>\n//         <span>Hello {name},</span>\n//         <div>\n//           {[...Array(numStars)].map((_, index) => (\n//             <span\n//               key={index}\n//               onMouseEnter={() => this.handleMouseEnter(index +0.5)}\n//               onMouseLeave={this.handleMouseLeave}\n//               onClick={() => this.handleRatingChange(index + 0.5)}\n//               style={{\n//                 cursor: \"pointer\",\n//                 color: index < (hoverRating || rating) ? \"gold\" : \"grey\"\n//               }}\n//             >\n//               {this.renderStar(index)}\n//             </span>\n//           ))}\n//         </div>\n//       </div>\n//     );\n//   };\n//   /** Click handler for our \"Click Me!\" button. */\n//   private renderStar = (index: number): ReactNode => {\n//     const { hoverRating, rating } = this.state;\n//     const roundedRating = hoverRating !== null ? hoverRating : rating;\n\n//     // Check if the current index is less than the rounded rating\n//     // If yes, render a full star\n//     if (index <= roundedRating) {\n//       return \"★\";\n//     } else {\n//       // Check if the rounded rating is a whole number\n//       // If not, check if the current index is equal to the rounded rating plus 0.5\n//       // If yes, render a half star\n\n//       if (this.state.rating - index === 0.5) {\n//         return \"☆\"; // Half-star symbol\n//       } else if (index <= roundedRating) {\n//         return \"★\"; // Full-star symbol\n//       } else {\n//         return \"☆\"; // Empty-star symbol\n//       }\n//     };\n\n//     //   if (roundedRating % 1 !== 0 && index === roundedRating + 0.5) {\n//     //     return \"½\";\n//     //   } else {\n//     //     return \"☆\"; // Otherwise, render an empty star\n//     //   }\n//     // }\n//   };\n\n//   private handleMouseEnter = (index: number): void => {\n//     this.setState({ hoverRating: index });\n//   };\n\n//   private handleMouseLeave = (): void => {\n//     this.setState({ hoverRating: 0 });\n//   };\n\n//   private handleRatingChange = (rating: number): void => {\n//     // Round the rating to the nearest half-star (0.5 increment)\n//     const roundedRating = Math.round(rating * 2) / 2;\n//     this.setState({ rating: roundedRating }, () => Streamlit.setComponentValue(roundedRating));\n//   };\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   private _onFocus = (): void => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(StarRatings)\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","jsxDEV","_jsxDEV","StarRatings","constructor","_args","state","rating","isFocused","render","args","disabled","theme","props","numStars","primaryColor","style","border","outline","children","Array","map","_","index","onClick","handleRatingChange","onMouseMove","event","handleMouseMove","onMouseLeave","handleMouseLeave","cursor","color","onFocus","_onFocus","onBlur","_onBlur","getStarSymbol","fileName","_jsxFileName","lineNumber","columnNumber","setState","setComponentValue","rect","currentTarget","getBoundingClientRect","offsetX","clientX","left","percentage","width","newRating","Math","round","prevState","roundedRating","_c","$RefreshReg$"],"sources":["C:/Users/monik/Downloads/component-template-master/component-template-master/template/star_ratings/frontend/src/StarRatings.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  ComponentProps,\n  Theme\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  rating: number;\n  isFocused: boolean;\n}\n\nclass StarRatings extends StreamlitComponentBase<State> {\n  public state: State = { rating: 0, isFocused: false };\n\n  public render = (): ReactNode => {\n    const { rating, isFocused } = this.state;\n    const { args, disabled, theme }: ComponentProps & { theme?: Theme } = this.props;\n\n    const numStars: number = args[\"numStars\"] || 5; // Number of stars passed from Python\n\n    // Use optional chaining to safely access properties of the theme object\n    const primaryColor = theme?.primaryColor || \"gray\";\n\n    const style: React.CSSProperties = {\n      border: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n      outline: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n    };\n\n    return (\n      <div>\n        <div>\n          {[...Array(numStars)].map((_, index) => (\n            <span\n              key={index}\n              onClick={() => this.handleRatingChange(index + 1)}\n              onMouseMove={(event) => this.handleMouseMove(event, index + 1)}\n              onMouseLeave={() => this.handleMouseLeave()}\n              style={{ cursor: \"pointer\", color: index < rating ? \"gold\" : \"gray\" }}\n              onFocus={this._onFocus}\n              onBlur={this._onBlur}\n            >\n              {this.getStarSymbol(index + 1)}\n            </span>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  private handleRatingChange = (rating: number): void => {\n    this.setState({ rating }, () => Streamlit.setComponentValue(rating));\n  };\n\n  private handleMouseMove = (event: React.MouseEvent, index: number): void => {\n    const rect = event.currentTarget.getBoundingClientRect();\n    const offsetX = event.clientX - rect.left;\n    const percentage = offsetX / rect.width;\n    let newRating = index + percentage;\n\n    // Round to the nearest half-star\n    newRating = Math.round(newRating * 2) / 2;\n\n    this.setState({ rating: newRating });\n  };\n\n  private handleMouseLeave = (): void => {\n    // Reset rating to the whole number\n    this.setState((prevState) => ({ rating: Math.round(prevState.rating) }));\n  };\n\n  private getStarSymbol = (index: number): string => {\n    const roundedRating = Math.round(this.state.rating);\n    if (this.state.rating - index === 0.5) {\n      return \"☆\"; // Half-star symbol\n    } else if (index <= roundedRating) {\n      return \"★\"; // Full-star symbol\n    } else {\n      return \"☆\"; // Empty-star symbol\n    }\n  };\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(StarRatings)\n\n\n\n\n\n// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n//   ComponentProps, Theme\n// } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n\n// interface State {\n//   rating: number;\n//   hoverRating: number | null;\n//   isFocused: boolean;\n// }\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class StarRatings extends StreamlitComponentBase<State> {\n//   public state: State = { rating: 0, hoverRating: null, isFocused: false };\n\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const { rating, hoverRating, isFocused } = this.state;\n//     const { args, disabled, theme }: ComponentProps & { theme?: Theme } = this.props;\n\n//     const numStars: number = args[\"numStars\"] || 5;\n//     const name: string = args[\"name\"] || \"\";\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     // const { theme } = this.props\n//     const primaryColor = theme?.primaryColor || \"gray\";\n//     const style: React.CSSProperties = {\n//       border: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n//       outline: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n//     };\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <div>\n//         <span>Hello {name},</span>\n//         <div>\n//           {[...Array(numStars)].map((_, index) => (\n//             <span\n//               key={index}\n//               onMouseEnter={() => this.handleMouseEnter(index +0.5)}\n//               onMouseLeave={this.handleMouseLeave}\n//               onClick={() => this.handleRatingChange(index + 0.5)}\n//               style={{\n//                 cursor: \"pointer\",\n//                 color: index < (hoverRating || rating) ? \"gold\" : \"grey\"\n//               }}\n//             >\n//               {this.renderStar(index)}\n//             </span>\n//           ))}\n//         </div>\n//       </div>\n//     );\n//   };\n//   /** Click handler for our \"Click Me!\" button. */\n//   private renderStar = (index: number): ReactNode => {\n//     const { hoverRating, rating } = this.state;\n//     const roundedRating = hoverRating !== null ? hoverRating : rating;\n    \n//     // Check if the current index is less than the rounded rating\n//     // If yes, render a full star\n//     if (index <= roundedRating) {\n//       return \"★\";\n//     } else {\n//       // Check if the rounded rating is a whole number\n//       // If not, check if the current index is equal to the rounded rating plus 0.5\n//       // If yes, render a half star\n\n//       if (this.state.rating - index === 0.5) {\n//         return \"☆\"; // Half-star symbol\n//       } else if (index <= roundedRating) {\n//         return \"★\"; // Full-star symbol\n//       } else {\n//         return \"☆\"; // Empty-star symbol\n//       }\n//     };\n  \n//     //   if (roundedRating % 1 !== 0 && index === roundedRating + 0.5) {\n//     //     return \"½\";\n//     //   } else {\n//     //     return \"☆\"; // Otherwise, render an empty star\n//     //   }\n//     // }\n//   };\n\n//   private handleMouseEnter = (index: number): void => {\n//     this.setState({ hoverRating: index });\n//   };\n\n//   private handleMouseLeave = (): void => {\n//     this.setState({ hoverRating: 0 });\n//   };\n\n//   private handleRatingChange = (rating: number): void => {\n//     // Round the rating to the nearest half-star (0.5 increment)\n//     const roundedRating = Math.round(rating * 2) / 2;\n//     this.setState({ rating: roundedRating }, () => Streamlit.setComponentValue(roundedRating));\n//   };\n\n\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   private _onFocus = (): void => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(StarRatings)\n"],"mappings":";AAAA,SACEA,SAAS,EACTC,sBAAsB,EACtBC,uBAAuB,QAGlB,yBAAyB;AAChC,OAAOC,KAAK,MAAqB,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOxC,MAAMC,WAAW,SAASL,sBAAsB,CAAQ;EAAAM,YAAA,GAAAC,KAAA;IAAA,SAAAA,KAAA;IAAA,KAC/CC,KAAK,GAAU;MAAEC,MAAM,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAM,CAAC;IAAA,KAE9CC,MAAM,GAAG,MAAiB;MAC/B,MAAM;QAAEF,MAAM;QAAEC;MAAU,CAAC,GAAG,IAAI,CAACF,KAAK;MACxC,MAAM;QAAEI,IAAI;QAAEC,QAAQ;QAAEC;MAA0C,CAAC,GAAG,IAAI,CAACC,KAAK;MAEhF,MAAMC,QAAgB,GAAGJ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;;MAEhD;MACA,MAAMK,YAAY,GAAG,CAAAH,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEG,YAAY,KAAI,MAAM;MAElD,MAAMC,KAA0B,GAAG;QACjCC,MAAM,EAAG,aAAYT,SAAS,GAAGO,YAAY,GAAG,MAAO,EAAC;QACxDG,OAAO,EAAG,aAAYV,SAAS,GAAGO,YAAY,GAAG,MAAO;MAC1D,CAAC;MAED,oBACEb,OAAA;QAAAiB,QAAA,eACEjB,OAAA;UAAAiB,QAAA,EACG,CAAC,GAAGC,KAAK,CAACN,QAAQ,CAAC,CAAC,CAACO,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,kBACjCrB,OAAA;YAEEsB,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACC,kBAAkB,CAACF,KAAK,GAAG,CAAC,CAAE;YAClDG,WAAW,EAAGC,KAAK,IAAK,IAAI,CAACC,eAAe,CAACD,KAAK,EAAEJ,KAAK,GAAG,CAAC,CAAE;YAC/DM,YAAY,EAAEA,CAAA,KAAM,IAAI,CAACC,gBAAgB,CAAC,CAAE;YAC5Cd,KAAK,EAAE;cAAEe,MAAM,EAAE,SAAS;cAAEC,KAAK,EAAET,KAAK,GAAGhB,MAAM,GAAG,MAAM,GAAG;YAAO,CAAE;YACtE0B,OAAO,EAAE,IAAI,CAACC,QAAS;YACvBC,MAAM,EAAE,IAAI,CAACC,OAAQ;YAAAjB,QAAA,EAEpB,IAAI,CAACkB,aAAa,CAACd,KAAK,GAAG,CAAC;UAAC,GARzBA,KAAK;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OASN,CACP;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAEV,CAAC;IAAA,KAEOhB,kBAAkB,GAAIlB,MAAc,IAAW;MACrD,IAAI,CAACmC,QAAQ,CAAC;QAAEnC;MAAO,CAAC,EAAE,MAAMV,SAAS,CAAC8C,iBAAiB,CAACpC,MAAM,CAAC,CAAC;IACtE,CAAC;IAAA,KAEOqB,eAAe,GAAG,CAACD,KAAuB,EAAEJ,KAAa,KAAW;MAC1E,MAAMqB,IAAI,GAAGjB,KAAK,CAACkB,aAAa,CAACC,qBAAqB,CAAC,CAAC;MACxD,MAAMC,OAAO,GAAGpB,KAAK,CAACqB,OAAO,GAAGJ,IAAI,CAACK,IAAI;MACzC,MAAMC,UAAU,GAAGH,OAAO,GAAGH,IAAI,CAACO,KAAK;MACvC,IAAIC,SAAS,GAAG7B,KAAK,GAAG2B,UAAU;;MAElC;MACAE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACF,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC;MAEzC,IAAI,CAACV,QAAQ,CAAC;QAAEnC,MAAM,EAAE6C;MAAU,CAAC,CAAC;IACtC,CAAC;IAAA,KAEOtB,gBAAgB,GAAG,MAAY;MACrC;MACA,IAAI,CAACY,QAAQ,CAAEa,SAAS,KAAM;QAAEhD,MAAM,EAAE8C,IAAI,CAACC,KAAK,CAACC,SAAS,CAAChD,MAAM;MAAE,CAAC,CAAC,CAAC;IAC1E,CAAC;IAAA,KAEO8B,aAAa,GAAId,KAAa,IAAa;MACjD,MAAMiC,aAAa,GAAGH,IAAI,CAACC,KAAK,CAAC,IAAI,CAAChD,KAAK,CAACC,MAAM,CAAC;MACnD,IAAI,IAAI,CAACD,KAAK,CAACC,MAAM,GAAGgB,KAAK,KAAK,GAAG,EAAE;QACrC,OAAO,GAAG,CAAC,CAAC;MACd,CAAC,MAAM,IAAIA,KAAK,IAAIiC,aAAa,EAAE;QACjC,OAAO,GAAG,CAAC,CAAC;MACd,CAAC,MAAM;QACL,OAAO,GAAG,CAAC,CAAC;MACd;IACF,CAAC;IAAA,KAEOtB,QAAQ,GAAG,MAAY;MAC7B,IAAI,CAACQ,QAAQ,CAAC;QAAElC,SAAS,EAAE;MAAK,CAAC,CAAC;IACpC,CAAC;IAAA,KAEO4B,OAAO,GAAG,MAAY;MAC5B,IAAI,CAACM,QAAQ,CAAC;QAAElC,SAAS,EAAE;MAAM,CAAC,CAAC;IACrC,CAAC;EAAA;AACH;AAEA,eAAAiD,EAAA,GAAe1D,uBAAuB,CAACI,WAAW,CAAC;;AAMnsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}