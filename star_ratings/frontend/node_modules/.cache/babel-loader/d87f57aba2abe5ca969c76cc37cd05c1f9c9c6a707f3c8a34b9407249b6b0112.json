{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\monik\\\\Downloads\\\\component-template-master\\\\component-template-master\\\\template\\\\star_ratings\\\\frontend\\\\src\\\\StarRatings.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass StarRatings extends StreamlitComponentBase {\n  constructor(..._args) {\n    super(..._args);\n    this.state = {\n      rating: 0,\n      isFocused: false\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const {\n        rating,\n        isFocused\n      } = this.state;\n      const {\n        args,\n        disabled,\n        theme\n      } = this.props;\n      const maxStars = args[\"maxStars\"] || 5;\n      const name = args[\"name\"] || \"User\";\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      // const { theme } = this.props\n      const primaryColor = (theme === null || theme === void 0 ? void 0 : theme.primaryColor) || \"gray\";\n      const style = {\n        border: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n        outline: `1px solid ${isFocused ? primaryColor : \"gray\"}`\n      };\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Hello \", name, \",\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [...Array(maxStars)].map((_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => this.handleRatingChange(index + 1),\n            style: {\n              cursor: \"pointer\",\n              color: index < rating ? \"gold\" : \"grey\"\n            },\n            onFocus: this._onFocus,\n            onBlur: this._onBlur,\n            children: \"\\u2605\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this);\n    };\n    /** Click handler for our \"Click Me!\" button. */\n    this.handleRatingChange = rating => {\n      this.setState({\n        rating\n      }, () => Streamlit.setComponentValue(rating));\n    };\n    /** Focus handler for our \"Click Me!\" button. */\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n    /** Blur handler for our \"Click Me!\" button. */\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(StarRatings);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","jsxDEV","_jsxDEV","StarRatings","constructor","_args","state","rating","isFocused","render","args","disabled","theme","props","maxStars","name","primaryColor","style","border","outline","borderStyling","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","map","_","index","onClick","handleRatingChange","cursor","color","onFocus","_onFocus","onBlur","_onBlur","setState","setComponentValue","_c","$RefreshReg$"],"sources":["C:/Users/monik/Downloads/component-template-master/component-template-master/template/star_ratings/frontend/src/StarRatings.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  ComponentProps, Theme\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  rating: number;\n  isFocused: boolean;\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass StarRatings extends StreamlitComponentBase<State> {\n  public state: State = { rating: 0, isFocused: false };\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const { rating, isFocused } = this.state;\n    const { args, disabled, theme }: ComponentProps & { theme?: Theme } = this.props;\n\n    const maxStars: number = args[\"maxStars\"] || 5;\n    const name: string = args[\"name\"] || \"User\";\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    // const { theme } = this.props\n    const primaryColor = theme?.primaryColor || \"gray\";\n    const style: React.CSSProperties = {\n      border: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n      outline: `1px solid ${isFocused ? primaryColor : \"gray\"}`,\n    };\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <div>\n        <span>Hello {name},</span>\n        <div>\n          {[...Array(maxStars)].map((_, index) => (\n            <span\n              key={index}\n              onClick={() => this.handleRatingChange(index + 1)}\n              style={{ cursor: \"pointer\", color: index < rating ? \"gold\" : \"grey\" }}\n              onFocus={this._onFocus}\n              onBlur={this._onBlur}\n            >\n              â˜…\n            </span>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  /** Click handler for our \"Click Me!\" button. */\n\n  private handleRatingChange = (rating: number): void => {\n    this.setState({ rating }, () => Streamlit.setComponentValue(rating));\n  };\n\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StarRatings)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}